STARTUP GUIDE
=============

1. OSRM setup

	git clone https://github.com/Project-OSRM/osrm-backend.git
	cd osrm-backend
	mkdir -p build
	cd build
	cmake .. -DCMAKE_CXX_FLAGS="-Wno-error=array-bounds"
	cmake --build .

2. Move map to osrm-backend/maps/magin/map_magin.osm

3. Set up OSRM

	./osrm-extract -p ../profiles/car.lua ~/codebase/osrm-backend/maps/magin/map_magin.osm
	./osrm-partition /home/c0debaberafa/codebase/osrm-backend/maps/magin/map_magin
	./osrm-customize /home/c0debaberafa/codebase/osrm-backend/maps/magin/map_magin




RUNNING / TESTING
=================

4. Running OSRM server

	./osrm-routed --algorithm mld ../maps/magin/map_magin

5. Run simulation

	python3 -m venv venv
	source venv/bin/activate
	python3 __main__.py


6. Run visualization

	(inside generator/, using venv)
	flask --app server run --port=5050

	(inside visualization/)
	serve .



CHANGELOG
=========

2/5/25 - R
	read through code, very minor tweaks

3/5/25 - R
	fix roaming implementation
	generate initial roaming graphs
	turn off watch history and recommendations

	passenger status enum
		added to create passenger status

	passenger class
		added status field
			updated scenarios/real to update status

	entities.py/tricycle
		findNearbyPassengers() - to detect passengers within accepted pickup radius
			in - self, passengers, radius*
			out - nearby (list of nearby passengers / closest passenger)

	scenarios/real.py/simulator/processframe
		tricycle loop - include nearby passenger detection and pickup

	simulation

5/5/25 - R
	fixed visualization

	for next session:
		fix visualization
			add terminal markers
			update text
				tricycles
					current passengers
				passengers
					status
		roaming
			pure roaming setup


5/6/25 - R

	dashboard.py
		take a look
	visualization updates
		show run metadata
		indicate terminal locations
			would need to export terminal locations in simulation output
				* more understanding of how run simulation is done
	roaming implementation
		figure out how all passengers can be picked up eventually
			if not, this would be skewed. take NOTE

	========

	dashboard.py
		took a look
	visualization updates
		created time and location data to events for tricycles
			for passengers?
		updated visualization code
			show passenger spawn and status
				custom passenger icons, colored per status
					waiting - red
					enqueued - orange
					onboard - yellow
					completed - green
			show event pop ups
				appear
				load
				wait
				drop-off
	roamming implementation



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


